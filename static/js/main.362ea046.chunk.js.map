{"version":3,"sources":["fonts/Raleway-Regular.ttf","assets/sarah-crutchfield-Dq3LFhdmYcw-unsplash.jpg","theme.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","raleway","fontFamily","fontStyle","fontDisplay","fontWeight","src","RalewayTtf","unicodeRange","theme","createMuiTheme","palette","primary","main","secondary","typography","overrides","MuiCssBaseline","useStyles","makeStyles","mainContainer","paddingTop","spacing","mainImage","backgroundImage","backgroundSize","backgroundPosition","height","overflow","imageButton","borderColor","color","appBar","backgroundColor","welcomeText","imageDarken","App","classes","ThemeProvider","CssBaseline","AppBar","position","className","Toolbar","style","justifyContent","Typography","align","variant","Grid","container","direction","justify","item","Button","Container","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8GAAAA,EAAOC,QAAU,IAA0B,6C,uDCA3CD,EAAOC,QAAU,IAA0B,oE,4JCIrCC,EAAU,CACdC,WAAY,UACZC,UAAW,SACXC,YAAa,OACbC,WAAY,IACZC,IAAI,mEAAD,O,OAGKC,EAHL,uBAKHC,aACE,sJAGSC,EAAQC,YAAe,CAClCC,QAAS,CACPC,QAAS,CACPC,KAAM,WAERC,UAAW,CACTD,KAAM,YAGVE,WAAY,CACVb,WAAY,kBAEdc,UAAW,CACTC,eAAgB,CACd,UAAW,CACT,aAAc,CAAChB,Q,gBChBjBiB,EAAYC,aAAW,SAAAV,GAAK,MAAK,CACrCW,cAAe,CACbC,WAAYZ,EAAMa,QAAQ,IAE5BC,UAAW,CACTC,gBAAgB,oHAChBC,eAAgB,QAChBC,mBAAoB,SACpBC,OAAQ,QACRC,SAAU,UAEZC,YAAa,CACXC,YAAa,QACbC,MAAO,SAETC,OAAQ,CACNC,gBAAiB,SAEnBC,YAAa,CACXH,MAAO,SAETI,YAAa,CACXF,gBAAiB,kBACjBN,OAAQ,yBAgFGS,MAxEf,WACE,IAAMC,EAAUnB,IAEhB,OACE,kBAACoB,EAAA,EAAD,CAAe7B,MAAOA,GACpB,kBAAC8B,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,CAAQC,SAAS,SAASC,UAAWL,EAAQL,QAC3C,kBAACW,EAAA,EAAD,CAASC,MAAO,CAAEC,eAAgB,WAChC,kBAACC,EAAA,EAAD,CAAYC,MAAM,SAASC,QAAQ,MAAnC,uBAKJ,yBAAKN,UAAWL,EAAQd,WACtB,kBAAC0B,EAAA,EAAD,CACEC,WAAS,EACTC,UAAU,SACVC,QAAQ,SACR9B,QAAS,EACToB,UAAWL,EAAQF,aAEnB,kBAACc,EAAA,EAAD,CAAMI,MAAI,GACR,kBAACP,EAAA,EAAD,CACEE,QAAQ,KACRN,UAAWL,EAAQH,YACnBa,MAAM,UAHR,2BAQF,kBAACE,EAAA,EAAD,CAAMI,MAAI,EAACH,WAAS,EAACE,QAAQ,SAAS9B,QAAS,GAC7C,kBAAC2B,EAAA,EAAD,CAAMI,MAAI,GACR,kBAACC,EAAA,EAAD,CAAQN,QAAQ,YAAYjB,MAAM,aAAlC,aAIF,kBAACkB,EAAA,EAAD,CAAMI,MAAI,GACR,kBAACC,EAAA,EAAD,CAAQN,QAAQ,WAAWN,UAAWL,EAAQR,aAA9C,eAOR,kBAAC0B,EAAA,EAAD,KACE,kBAACN,EAAA,EAAD,CACEC,WAAS,EACTR,UAAWL,EAAQjB,cACnBgC,QAAQ,gBAER,kBAACH,EAAA,EAAD,CAAMI,MAAI,GACR,4CAEF,kBAACJ,EAAA,EAAD,CAAMI,MAAI,GACR,kBAACP,EAAA,EAAD,CAAYE,QAAQ,MAApB,YACA,kBAACF,EAAA,EAAD,CAAYE,QAAQ,QAAQQ,UAAU,KAAtC,qRAOA,kBAACV,EAAA,EAAD,CAAYE,QAAQ,QAAQQ,UAAU,KAAtC,4DClGQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.362ea046.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Raleway-Regular.9942588a.ttf\";","module.exports = __webpack_public_path__ + \"static/media/sarah-crutchfield-Dq3LFhdmYcw-unsplash.4b15e239.jpg\";","import { createMuiTheme } from \"@material-ui/core/styles\";\n\nimport RalewayTtf from \"./fonts/Raleway-Regular.ttf\";\n\nconst raleway = {\n  fontFamily: \"Raleway\",\n  fontStyle: \"normal\",\n  fontDisplay: \"swap\",\n  fontWeight: 400,\n  src: `\n    local('Raleway'),\n    local('Raleway-Regular'),\n    url(${RalewayTtf}) format('ttf')\n  `,\n  unicodeRange:\n    \"U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF\"\n};\n\nexport const theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: \"#a5d6a7\"\n    },\n    secondary: {\n      main: \"#9fa8da\"\n    }\n  },\n  typography: {\n    fontFamily: \"Raleway, Arial\"\n  },\n  overrides: {\n    MuiCssBaseline: {\n      \"@global\": {\n        \"@font-face\": [raleway]\n      }\n    }\n  }\n});\n","import {\n  AppBar,\n  ThemeProvider,\n  Toolbar,\n  Typography,\n  IconButton,\n  CssBaseline,\n  Container,\n  Grid,\n  Button\n} from \"@material-ui/core\";\nimport React from \"react\";\nimport { theme } from \"./theme\";\nimport { Menu } from \"@material-ui/icons\";\nimport image from \"./assets/sarah-crutchfield-Dq3LFhdmYcw-unsplash.jpg\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles(theme => ({\n  mainContainer: {\n    paddingTop: theme.spacing(4)\n  },\n  mainImage: {\n    backgroundImage: `url(https://images.unsplash.com/photo-1517315003714-a071486bd9ea?ixlib=rb-1.2.1&auto=format&fit=crop&w=1502&q=80)`,\n    backgroundSize: \"cover\",\n    backgroundPosition: \"center\",\n    height: \"100vh\",\n    overflow: \"hidden\"\n  },\n  imageButton: {\n    borderColor: \"white\",\n    color: \"white\"\n  },\n  appBar: {\n    backgroundColor: \"white\"\n  },\n  welcomeText: {\n    color: \"white\"\n  },\n  imageDarken: {\n    backgroundColor: \"rgba(0,0,0,0.2)\",\n    height: \"calc(100% + 24px)\"\n    // width: \"100%\"\n  }\n}));\n\n// use transitions to slide out title page after clicking \"projects\" and slide in projects \n// minimalistic cards\n\nfunction App() {\n  const classes = useStyles();\n\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <AppBar position=\"sticky\" className={classes.appBar}>\n        <Toolbar style={{ justifyContent: \"center\" }}>\n          <Typography align=\"center\" variant=\"h5\">\n            Mackenzie Salloum\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <div className={classes.mainImage}>\n        <Grid\n          container\n          direction=\"column\"\n          justify=\"center\"\n          spacing={3}\n          className={classes.imageDarken}\n        >\n          <Grid item>\n            <Typography\n              variant=\"h3\"\n              className={classes.welcomeText}\n              align=\"center\"\n            >\n              Welcome to my website!\n            </Typography>\n          </Grid>\n          <Grid item container justify=\"center\" spacing={5}>\n            <Grid item>\n              <Button variant=\"contained\" color=\"secondary\">\n                About Me\n              </Button>\n            </Grid>\n            <Grid item>\n              <Button variant=\"outlined\" className={classes.imageButton}>\n                Contact\n              </Button>\n            </Grid>\n          </Grid>\n        </Grid>\n      </div>\n      <Container>\n        <Grid\n          container\n          className={classes.mainContainer}\n          justify=\"space-evenly\"\n        >\n          <Grid item>\n            <div>img of me!</div>\n          </Grid>\n          <Grid item>\n            <Typography variant=\"h4\">About me</Typography>\n            <Typography variant=\"body1\" component=\"p\">\n              My name is Mackenzie! Currently located in Kelowna, BC, I enjoy\n              doing various things, including hiking all over BC in the\n              beautiful sunshine, skiing in the winter, and programming high\n              quality software from front to back. Take a look at my LinkedIn\n              profile and GitHub page.\n            </Typography>\n            <Typography variant=\"body1\" component=\"p\">\n              Take a look at my LinkedIn profile and GitHub page.\n            </Typography>\n          </Grid>\n        </Grid>\n      </Container>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}